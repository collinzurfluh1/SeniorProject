{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContextRunnerImpl = exports.ResultWithContext = void 0;\nconst _ = require(\"lodash\");\nconst base_1 = require(\"../base\");\nconst context_1 = require(\"../context\");\nconst select_fields_1 = require(\"../select-fields\");\nconst validation_result_1 = require(\"../validation-result\");\nclass ResultWithContext extends validation_result_1.Result {\n  constructor(context) {\n    super(error => error, context.errors);\n    this.context = context;\n  }\n}\nexports.ResultWithContext = ResultWithContext;\nclass ContextRunnerImpl {\n  constructor(builderOrContext) {\n    let selectFields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : select_fields_1.selectFields;\n    this.builderOrContext = builderOrContext;\n    this.selectFields = selectFields;\n  }\n  async run(req) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const context = this.builderOrContext instanceof context_1.Context ? this.builderOrContext : this.builderOrContext.build();\n    const instances = this.selectFields(req, context.fields, context.locations);\n    context.addFieldInstances(instances);\n    const haltedInstances = new Set();\n    for (const contextItem of context.stack) {\n      const promises = context.getData({\n        requiredOnly: true\n      }).map(async instance => {\n        const {\n          location,\n          path\n        } = instance;\n        const instanceKey = `${location}:${path}`;\n        if (haltedInstances.has(instanceKey)) {\n          return;\n        }\n        try {\n          await contextItem.run(context, instance.value, {\n            req,\n            location,\n            path\n          });\n          // An instance is mutable, so if an item changed its value, there's no need to call getData again\n          const newValue = instance.value;\n          // Checks whether the value changed.\n          // Avoids e.g. undefined values being set on the request if it didn't have the key initially.\n          const reqValue = path !== '' ? _.get(req[location], path) : req[location];\n          if (!options.dryRun && reqValue !== instance.value) {\n            path !== '' ? _.set(req[location], path, newValue) : _.set(req, location, newValue);\n          }\n        } catch (e) {\n          if (e instanceof base_1.ValidationHalt) {\n            haltedInstances.add(instanceKey);\n            return;\n          }\n          throw e;\n        }\n      });\n      await Promise.all(promises);\n    }\n    if (!options.dryRun) {\n      const internalReq = req;\n      internalReq[base_1.contextsKey] = (internalReq[base_1.contextsKey] || []).concat(context);\n    }\n    return new ResultWithContext(context);\n  }\n}\nexports.ContextRunnerImpl = ContextRunnerImpl;","map":{"version":3,"names":["Object","defineProperty","exports","value","ContextRunnerImpl","ResultWithContext","_","require","base_1","context_1","select_fields_1","validation_result_1","Result","constructor","context","error","errors","builderOrContext","selectFields","run","req","options","Context","build","instances","fields","locations","addFieldInstances","haltedInstances","Set","contextItem","stack","promises","getData","requiredOnly","map","instance","location","path","instanceKey","has","newValue","reqValue","get","dryRun","set","e","ValidationHalt","add","Promise","all","internalReq","contextsKey","concat"],"sources":["/Users/collin/SeniorProject/pool-party/node_modules/express-validator/src/chain/context-runner-impl.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContextRunnerImpl = exports.ResultWithContext = void 0;\nconst _ = require(\"lodash\");\nconst base_1 = require(\"../base\");\nconst context_1 = require(\"../context\");\nconst select_fields_1 = require(\"../select-fields\");\nconst validation_result_1 = require(\"../validation-result\");\nclass ResultWithContext extends validation_result_1.Result {\n    constructor(context) {\n        super(error => error, context.errors);\n        this.context = context;\n    }\n}\nexports.ResultWithContext = ResultWithContext;\nclass ContextRunnerImpl {\n    constructor(builderOrContext, selectFields = select_fields_1.selectFields) {\n        this.builderOrContext = builderOrContext;\n        this.selectFields = selectFields;\n    }\n    async run(req, options = {}) {\n        const context = this.builderOrContext instanceof context_1.Context\n            ? this.builderOrContext\n            : this.builderOrContext.build();\n        const instances = this.selectFields(req, context.fields, context.locations);\n        context.addFieldInstances(instances);\n        const haltedInstances = new Set();\n        for (const contextItem of context.stack) {\n            const promises = context.getData({ requiredOnly: true }).map(async (instance) => {\n                const { location, path } = instance;\n                const instanceKey = `${location}:${path}`;\n                if (haltedInstances.has(instanceKey)) {\n                    return;\n                }\n                try {\n                    await contextItem.run(context, instance.value, {\n                        req,\n                        location,\n                        path,\n                    });\n                    // An instance is mutable, so if an item changed its value, there's no need to call getData again\n                    const newValue = instance.value;\n                    // Checks whether the value changed.\n                    // Avoids e.g. undefined values being set on the request if it didn't have the key initially.\n                    const reqValue = path !== '' ? _.get(req[location], path) : req[location];\n                    if (!options.dryRun && reqValue !== instance.value) {\n                        path !== '' ? _.set(req[location], path, newValue) : _.set(req, location, newValue);\n                    }\n                }\n                catch (e) {\n                    if (e instanceof base_1.ValidationHalt) {\n                        haltedInstances.add(instanceKey);\n                        return;\n                    }\n                    throw e;\n                }\n            });\n            await Promise.all(promises);\n        }\n        if (!options.dryRun) {\n            const internalReq = req;\n            internalReq[base_1.contextsKey] = (internalReq[base_1.contextsKey] || []).concat(context);\n        }\n        return new ResultWithContext(context);\n    }\n}\nexports.ContextRunnerImpl = ContextRunnerImpl;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}