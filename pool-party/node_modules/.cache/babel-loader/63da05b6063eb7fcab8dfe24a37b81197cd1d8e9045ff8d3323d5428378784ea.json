{"ast":null,"code":"var _jsxFileName = \"/Users/collin/SeniorProject/pool-party/src/App.js\";\nimport logo from './logo.svg';\nimport './App.css';\nimport NavigationBar from './Components/NavigationBar';\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport ReactDOM from \"react-dom/client\";\nimport Home from './Views/Home';\nimport Creator from './Views/Creator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nrequire(\"dotenv\").config();\nconst DB_HOST = process.env.DB_HOST;\nconst DB_USER = process.env.DB_USER;\nconst DB_PASSWORD = process.env.DB_PASSWORD;\nconst DB_DATABASE = process.env.DB_DATABASE;\nconst DB_PORT = process.env.DB_PORT;\nconst db = mysql.createPool({\n  connectionLimit: 100,\n  host: DB_HOST,\n  user: DB_USER,\n  password: DB_PASSWORD,\n  database: DB_DATABASE,\n  port: DB_PORT\n});\nconst port = process.env.PORT;\napp.listen(port, () => console.log(`Server Started on port ${port}...`));\nconst bcrypt = require(\"bcrypt\");\napp.use(express.json());\n//middleware to read req.body.<params>\n//CREATE USER\napp.post(\"/createUser\", async (req, res) => {\n  const user = req.body.name;\n  const hashedPassword = await bcrypt.hash(req.body.password, 10);\n  db.getConnection(async (err, connection) => {\n    if (err) throw err;\n    const sqlSearch = \"SELECT * FROM userTable WHERE user = ?\";\n    const search_query = mysql.format(sqlSearch, [user]);\n    const sqlInsert = \"INSERT INTO userTable VALUES (0,?,?)\";\n    const insert_query = mysql.format(sqlInsert, [user, hashedPassword]);\n    // ? will be replaced by values\n    // ?? will be replaced by string\n    await connection.query(search_query, async (err, result) => {\n      if (err) throw err;\n      console.log(\"------> Search Results\");\n      console.log(result.length);\n      if (result.length != 0) {\n        connection.release();\n        console.log(\"------> User already exists\");\n        res.sendStatus(409);\n      } else {\n        await connection.query(insert_query, (err, result) => {\n          connection.release();\n          if (err) throw err;\n          console.log(\"--------> Created new User\");\n          console.log(result.insertId);\n          res.sendStatus(201);\n        });\n      }\n    }); //end of connection.query()\n  }); //end of db.getConnection()\n}); //end of app.post()\n\n//LOGIN (AUTHENTICATE USER)\napp.post(\"/login\", (req, res) => {\n  const user = req.body.name;\n  const password = req.body.password;\n  db.getConnection(async (err, connection) => {\n    if (err) throw err;\n    const sqlSearch = \"Select * from userTable where user = ?\";\n    const search_query = mysql.format(sqlSearch, [user]);\n    await connection.query(search_query, async (err, result) => {\n      connection.release();\n      if (err) throw err;\n      if (result.length == 0) {\n        console.log(\"--------> User does not exist\");\n        res.sendStatus(404);\n      } else {\n        const hashedPassword = result[0].password;\n        //get the hashedPassword from result\n        if (await bcrypt.compare(password, hashedPassword)) {\n          console.log(\"---------> Login Successful\");\n          res.send(`${user} is logged in!`);\n        } else {\n          console.log(\"---------> Password Incorrect\");\n          res.send(\"Password incorrect!\");\n        } //end of bcrypt.compare()\n      } //end of User exists i.e. results.length==0\n    }); //end of connection.query()\n  }); //end of db.connection()\n}); //end of app.post()\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          index: true,\n          element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/Home\",\n          element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 40\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/Creator\",\n          element: /*#__PURE__*/_jsxDEV(Creator, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","NavigationBar","BrowserRouter","Routes","Route","ReactDOM","Home","Creator","require","config","DB_HOST","process","env","DB_USER","DB_PASSWORD","DB_DATABASE","DB_PORT","db","mysql","createPool","connectionLimit","host","user","password","database","port","PORT","app","listen","console","log","bcrypt","use","express","json","post","req","res","body","name","hashedPassword","hash","getConnection","err","connection","sqlSearch","search_query","format","sqlInsert","insert_query","query","result","length","release","sendStatus","insertId","compare","send","App","root","createRoot","document","getElementById"],"sources":["/Users/collin/SeniorProject/pool-party/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport NavigationBar from './Components/NavigationBar';\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport ReactDOM from \"react-dom/client\";\nimport Home from './Views/Home';\nimport Creator from './Views/Creator';\nrequire(\"dotenv\").config()\nconst DB_HOST = process.env.DB_HOST\nconst DB_USER = process.env.DB_USER\nconst DB_PASSWORD = process.env.DB_PASSWORD\nconst DB_DATABASE = process.env.DB_DATABASE\nconst DB_PORT = process.env.DB_PORT\nconst db = mysql.createPool({\n   connectionLimit: 100,\n   host: DB_HOST,\n   user: DB_USER,\n   password: DB_PASSWORD,\n   database: DB_DATABASE,\n   port: DB_PORT\n})\n\nconst port = process.env.PORT\napp.listen(port, \n()=> console.log(`Server Started on port ${port}...`))\n\nconst bcrypt = require(\"bcrypt\")\napp.use(express.json())\n//middleware to read req.body.<params>\n//CREATE USER\napp.post(\"/createUser\", async (req,res) => {\nconst user = req.body.name;\nconst hashedPassword = await bcrypt.hash(req.body.password,10);\ndb.getConnection( async (err, connection) => {\n if (err) throw (err)\n const sqlSearch = \"SELECT * FROM userTable WHERE user = ?\"\n const search_query = mysql.format(sqlSearch,[user])\n const sqlInsert = \"INSERT INTO userTable VALUES (0,?,?)\"\n const insert_query = mysql.format(sqlInsert,[user, hashedPassword])\n // ? will be replaced by values\n // ?? will be replaced by string\n await connection.query (search_query, async (err, result) => {\n  if (err) throw (err)\n  console.log(\"------> Search Results\")\n  console.log(result.length)\n  if (result.length != 0) {\n   connection.release()\n   console.log(\"------> User already exists\")\n   res.sendStatus(409) \n  } \n  else {\n   await connection.query (insert_query, (err, result)=> {\n   connection.release()\n   if (err) throw (err)\n   console.log (\"--------> Created new User\")\n   console.log(result.insertId)\n   res.sendStatus(201)\n  })\n }\n}) //end of connection.query()\n}) //end of db.getConnection()\n}) //end of app.post()\n\n//LOGIN (AUTHENTICATE USER)\napp.post(\"/login\", (req, res)=> {\n    const user = req.body.name\n    const password = req.body.password\n    db.getConnection ( async (err, connection)=> {\n     if (err) throw (err)\n     const sqlSearch = \"Select * from userTable where user = ?\"\n     const search_query = mysql.format(sqlSearch,[user])\n     await connection.query (search_query, async (err, result) => {\n      connection.release()\n      \n      if (err) throw (err)\n      if (result.length == 0) {\n       console.log(\"--------> User does not exist\")\n       res.sendStatus(404)\n      } \n      else {\n         const hashedPassword = result[0].password\n         //get the hashedPassword from result\n        if (await bcrypt.compare(password, hashedPassword)) {\n        console.log(\"---------> Login Successful\")\n        res.send(`${user} is logged in!`)\n        } \n        else {\n        console.log(\"---------> Password Incorrect\")\n        res.send(\"Password incorrect!\")\n        } //end of bcrypt.compare()\n      }//end of User exists i.e. results.length==0\n     }) //end of connection.query()\n    }) //end of db.connection()\n    }) //end of app.post()\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\">\n          <Route index element={<Home />} />\n          <Route path=\"/Home\" element={<Home />} />\n          <Route path=\"/Creator\" element={<Creator />} />\n\n\n          {/* <Route path=\"blogs\" element={<Blogs />} />\n          <Route path=\"contact\" element={<Contact />} />\n          <Route path=\"*\" element={<NoPage />} /> */}\n        </Route>\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nexport default App;\n"],"mappings":";AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAClB,OAAOC,aAAa,MAAM,4BAA4B;AACtD,SAASC,aAAa,EAAEC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AAC/D,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,IAAI,MAAM,cAAc;AAC/B,OAAOC,OAAO,MAAM,iBAAiB;AAAC;AACtCC,OAAO,CAAC,QAAQ,CAAC,CAACC,MAAM,EAAE;AAC1B,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACF,OAAO;AACnC,MAAMG,OAAO,GAAGF,OAAO,CAACC,GAAG,CAACC,OAAO;AACnC,MAAMC,WAAW,GAAGH,OAAO,CAACC,GAAG,CAACE,WAAW;AAC3C,MAAMC,WAAW,GAAGJ,OAAO,CAACC,GAAG,CAACG,WAAW;AAC3C,MAAMC,OAAO,GAAGL,OAAO,CAACC,GAAG,CAACI,OAAO;AACnC,MAAMC,EAAE,GAAGC,KAAK,CAACC,UAAU,CAAC;EACzBC,eAAe,EAAE,GAAG;EACpBC,IAAI,EAAEX,OAAO;EACbY,IAAI,EAAET,OAAO;EACbU,QAAQ,EAAET,WAAW;EACrBU,QAAQ,EAAET,WAAW;EACrBU,IAAI,EAAET;AACT,CAAC,CAAC;AAEF,MAAMS,IAAI,GAAGd,OAAO,CAACC,GAAG,CAACc,IAAI;AAC7BC,GAAG,CAACC,MAAM,CAACH,IAAI,EACf,MAAKI,OAAO,CAACC,GAAG,CAAE,0BAAyBL,IAAK,KAAI,CAAC,CAAC;AAEtD,MAAMM,MAAM,GAAGvB,OAAO,CAAC,QAAQ,CAAC;AAChCmB,GAAG,CAACK,GAAG,CAACC,OAAO,CAACC,IAAI,EAAE,CAAC;AACvB;AACA;AACAP,GAAG,CAACQ,IAAI,CAAC,aAAa,EAAE,OAAOC,GAAG,EAACC,GAAG,KAAK;EAC3C,MAAMf,IAAI,GAAGc,GAAG,CAACE,IAAI,CAACC,IAAI;EAC1B,MAAMC,cAAc,GAAG,MAAMT,MAAM,CAACU,IAAI,CAACL,GAAG,CAACE,IAAI,CAACf,QAAQ,EAAC,EAAE,CAAC;EAC9DN,EAAE,CAACyB,aAAa,CAAE,OAAOC,GAAG,EAAEC,UAAU,KAAK;IAC5C,IAAID,GAAG,EAAE,MAAOA,GAAG;IACnB,MAAME,SAAS,GAAG,wCAAwC;IAC1D,MAAMC,YAAY,GAAG5B,KAAK,CAAC6B,MAAM,CAACF,SAAS,EAAC,CAACvB,IAAI,CAAC,CAAC;IACnD,MAAM0B,SAAS,GAAG,sCAAsC;IACxD,MAAMC,YAAY,GAAG/B,KAAK,CAAC6B,MAAM,CAACC,SAAS,EAAC,CAAC1B,IAAI,EAAEkB,cAAc,CAAC,CAAC;IACnE;IACA;IACA,MAAMI,UAAU,CAACM,KAAK,CAAEJ,YAAY,EAAE,OAAOH,GAAG,EAAEQ,MAAM,KAAK;MAC5D,IAAIR,GAAG,EAAE,MAAOA,GAAG;MACnBd,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrCD,OAAO,CAACC,GAAG,CAACqB,MAAM,CAACC,MAAM,CAAC;MAC1B,IAAID,MAAM,CAACC,MAAM,IAAI,CAAC,EAAE;QACvBR,UAAU,CAACS,OAAO,EAAE;QACpBxB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;QAC1CO,GAAG,CAACiB,UAAU,CAAC,GAAG,CAAC;MACpB,CAAC,MACI;QACJ,MAAMV,UAAU,CAACM,KAAK,CAAED,YAAY,EAAE,CAACN,GAAG,EAAEQ,MAAM,KAAI;UACtDP,UAAU,CAACS,OAAO,EAAE;UACpB,IAAIV,GAAG,EAAE,MAAOA,GAAG;UACnBd,OAAO,CAACC,GAAG,CAAE,4BAA4B,CAAC;UAC1CD,OAAO,CAACC,GAAG,CAACqB,MAAM,CAACI,QAAQ,CAAC;UAC5BlB,GAAG,CAACiB,UAAU,CAAC,GAAG,CAAC;QACpB,CAAC,CAAC;MACH;IACD,CAAC,CAAC,EAAC;EACH,CAAC,CAAC,EAAC;AACH,CAAC,CAAC,EAAC;;AAEH;AACA3B,GAAG,CAACQ,IAAI,CAAC,QAAQ,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAI;EAC5B,MAAMf,IAAI,GAAGc,GAAG,CAACE,IAAI,CAACC,IAAI;EAC1B,MAAMhB,QAAQ,GAAGa,GAAG,CAACE,IAAI,CAACf,QAAQ;EAClCN,EAAE,CAACyB,aAAa,CAAG,OAAOC,GAAG,EAAEC,UAAU,KAAI;IAC5C,IAAID,GAAG,EAAE,MAAOA,GAAG;IACnB,MAAME,SAAS,GAAG,wCAAwC;IAC1D,MAAMC,YAAY,GAAG5B,KAAK,CAAC6B,MAAM,CAACF,SAAS,EAAC,CAACvB,IAAI,CAAC,CAAC;IACnD,MAAMsB,UAAU,CAACM,KAAK,CAAEJ,YAAY,EAAE,OAAOH,GAAG,EAAEQ,MAAM,KAAK;MAC5DP,UAAU,CAACS,OAAO,EAAE;MAEpB,IAAIV,GAAG,EAAE,MAAOA,GAAG;MACnB,IAAIQ,MAAM,CAACC,MAAM,IAAI,CAAC,EAAE;QACvBvB,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;QAC5CO,GAAG,CAACiB,UAAU,CAAC,GAAG,CAAC;MACpB,CAAC,MACI;QACF,MAAMd,cAAc,GAAGW,MAAM,CAAC,CAAC,CAAC,CAAC5B,QAAQ;QACzC;QACD,IAAI,MAAMQ,MAAM,CAACyB,OAAO,CAACjC,QAAQ,EAAEiB,cAAc,CAAC,EAAE;UACpDX,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;UAC1CO,GAAG,CAACoB,IAAI,CAAE,GAAEnC,IAAK,gBAAe,CAAC;QACjC,CAAC,MACI;UACLO,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;UAC5CO,GAAG,CAACoB,IAAI,CAAC,qBAAqB,CAAC;QAC/B,CAAC,CAAC;MACJ,CAAC;IACF,CAAC,CAAC,EAAC;EACJ,CAAC,CAAC,EAAC;AACH,CAAC,CAAC,EAAC;;AAEP,SAASC,GAAG,GAAG;EACb,oBACE,QAAC,aAAa;IAAA,uBACZ,QAAC,MAAM;MAAA,uBACL,QAAC,KAAK;QAAC,IAAI,EAAC,GAAG;QAAA,wBACb,QAAC,KAAK;UAAC,KAAK;UAAC,OAAO,eAAE,QAAC,IAAI;YAAA;YAAA;YAAA;UAAA;QAAI;UAAA;UAAA;UAAA;QAAA,QAAG,eAClC,QAAC,KAAK;UAAC,IAAI,EAAC,OAAO;UAAC,OAAO,eAAE,QAAC,IAAI;YAAA;YAAA;YAAA;UAAA;QAAI;UAAA;UAAA;UAAA;QAAA,QAAG,eACzC,QAAC,KAAK;UAAC,IAAI,EAAC,UAAU;UAAC,OAAO,eAAE,QAAC,OAAO;YAAA;YAAA;YAAA;UAAA;QAAI;UAAA;UAAA;UAAA;QAAA,QAAG;MAAA;QAAA;QAAA;QAAA;MAAA;IAMzC;MAAA;MAAA;MAAA;IAAA;EACD;IAAA;IAAA;IAAA;EAAA,QACK;AAEpB;AAAC,KAjBQA,GAAG;AAmBZ,MAAMC,IAAI,GAAGtD,QAAQ,CAACuD,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjE,eAAeJ,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}