{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.oneOf = void 0;\nconst _ = require(\"lodash\");\nconst chain_1 = require(\"../chain\");\nconst context_builder_1 = require(\"../context-builder\");\n// A dummy context item that gets added to surrogate contexts just to make them run\nconst dummyItem = {\n  async run() {}\n};\nfunction oneOf(chains, message) {\n  let result;\n  const middleware = async (req, _res, next) => {\n    const surrogateContext = new context_builder_1.ContextBuilder().addItem(dummyItem).build();\n    // Run each group of chains in parallel, and within each group, run each chain in parallel too.\n    const promises = chains.map(async chain => {\n      const group = Array.isArray(chain) ? chain : [chain];\n      const results = await Promise.all(group.map(chain => chain.run(req, {\n        dryRun: true\n      })));\n      const contexts = results.map(result => result.context);\n      const groupErrors = _.flatMap(contexts, 'errors');\n      // #536: The data from a chain within oneOf() can only be made available to e.g. matchedData()\n      // if its entire group is valid.\n      if (!groupErrors.length) {\n        contexts.forEach(context => {\n          surrogateContext.addFieldInstances(context.getData());\n        });\n      }\n      return groupErrors;\n    });\n    try {\n      const allErrors = await Promise.all(promises);\n      const success = allErrors.some(groupErrors => groupErrors.length === 0);\n      if (!success) {\n        // Only add an error to the context if no group of chains had success.\n        surrogateContext.addError(typeof message === 'function' ? message({\n          req\n        }) : message || 'Invalid value(s)', _.flatMap(allErrors));\n      }\n      // Final context running pass to ensure contexts are added and values are modified properly\n      result = await new chain_1.ContextRunnerImpl(surrogateContext).run(req);\n      next();\n    } catch (e) {\n      next(e);\n    }\n  };\n  const run = async req => {\n    return new Promise((resolve, reject) => {\n      middleware(req, {}, e => {\n        e ? reject(e) : resolve(result);\n      });\n    });\n  };\n  return Object.assign(middleware, {\n    run\n  });\n}\nexports.oneOf = oneOf;","map":{"version":3,"names":["Object","defineProperty","exports","value","oneOf","_","require","chain_1","context_builder_1","dummyItem","run","chains","message","result","middleware","req","_res","next","surrogateContext","ContextBuilder","addItem","build","promises","map","chain","group","Array","isArray","results","Promise","all","dryRun","contexts","context","groupErrors","flatMap","length","forEach","addFieldInstances","getData","allErrors","success","some","addError","ContextRunnerImpl","e","resolve","reject","assign"],"sources":["/Users/collin/SeniorProject/pool-party/node_modules/express-validator/src/middlewares/one-of.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.oneOf = void 0;\nconst _ = require(\"lodash\");\nconst chain_1 = require(\"../chain\");\nconst context_builder_1 = require(\"../context-builder\");\n// A dummy context item that gets added to surrogate contexts just to make them run\nconst dummyItem = { async run() { } };\nfunction oneOf(chains, message) {\n    let result;\n    const middleware = async (req, _res, next) => {\n        const surrogateContext = new context_builder_1.ContextBuilder().addItem(dummyItem).build();\n        // Run each group of chains in parallel, and within each group, run each chain in parallel too.\n        const promises = chains.map(async (chain) => {\n            const group = Array.isArray(chain) ? chain : [chain];\n            const results = await Promise.all(group.map(chain => chain.run(req, { dryRun: true })));\n            const contexts = results.map(result => result.context);\n            const groupErrors = _.flatMap(contexts, 'errors');\n            // #536: The data from a chain within oneOf() can only be made available to e.g. matchedData()\n            // if its entire group is valid.\n            if (!groupErrors.length) {\n                contexts.forEach(context => {\n                    surrogateContext.addFieldInstances(context.getData());\n                });\n            }\n            return groupErrors;\n        });\n        try {\n            const allErrors = await Promise.all(promises);\n            const success = allErrors.some(groupErrors => groupErrors.length === 0);\n            if (!success) {\n                // Only add an error to the context if no group of chains had success.\n                surrogateContext.addError(typeof message === 'function' ? message({ req }) : message || 'Invalid value(s)', _.flatMap(allErrors));\n            }\n            // Final context running pass to ensure contexts are added and values are modified properly\n            result = await new chain_1.ContextRunnerImpl(surrogateContext).run(req);\n            next();\n        }\n        catch (e) {\n            next(e);\n        }\n    };\n    const run = async (req) => {\n        return new Promise((resolve, reject) => {\n            middleware(req, {}, (e) => {\n                e ? reject(e) : resolve(result);\n            });\n        });\n    };\n    return Object.assign(middleware, { run });\n}\nexports.oneOf = oneOf;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}