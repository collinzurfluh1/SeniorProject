{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.selectFields = void 0;\nconst _ = require(\"lodash\");\nexports.selectFields = (req, fields, locations) => _(fields).flatMap(field => _.flatMap(locations, location => {\n  return expandField(req, field, location);\n}))\n// Avoid duplicates if multiple field selections would return the same field twice.\n// E.g. with fields = ['*.foo', 'bar.foo'] and req.body = { bar: { foo: 1 }, baz: { foo: 2 } },\n// the instance bla.foo would appear twice, and baz.foo once.\n.uniqWith(isSameFieldInstance).value();\nfunction isSameFieldInstance(a, b) {\n  return a.path === b.path && a.location === b.location;\n}\nfunction expandField(req, field, location) {\n  const originalPath = field;\n  const pathToExpand = location === 'headers' ? field.toLowerCase() : field;\n  const paths = [];\n  expandPath(req[location], pathToExpand, paths);\n  return paths.map(path => {\n    const value = path === '' ? req[location] : _.get(req[location], path);\n    return {\n      location,\n      path,\n      originalPath,\n      value,\n      originalValue: value\n    };\n  });\n}\nfunction expandPath(object, path, accumulator) {\n  const segments = _.toPath(path);\n  const wildcardPos = segments.indexOf('*');\n  if (wildcardPos > -1) {\n    const subObject = wildcardPos === 0 ? object : _.get(object, segments.slice(0, wildcardPos));\n    if (!subObject || !_.isObjectLike(subObject)) {\n      return;\n    }\n    Object.keys(subObject).map(key => segments\n    // Before the *\n    .slice(0, wildcardPos)\n    // The part that the * matched\n    .concat(key)\n    // After the *\n    .concat(segments.slice(wildcardPos + 1))).forEach(subPath => {\n      expandPath(object, subPath, accumulator);\n    });\n  } else {\n    const reconstructedPath = segments.reduce((prev, segment) => {\n      let part = '';\n      // TODO: Handle brackets?\n      if (segment.includes('.')) {\n        // Special char key access\n        part = `[\"${segment}\"]`;\n      } else if (/^\\d+$/.test(segment)) {\n        // Index access\n        part = `[${segment}]`;\n      } else if (prev) {\n        // Object key access\n        part = `.${segment}`;\n      } else {\n        // Top level key\n        part = segment;\n      }\n      return prev + part;\n    }, '');\n    accumulator.push(reconstructedPath);\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","selectFields","_","require","req","fields","locations","flatMap","field","location","expandField","uniqWith","isSameFieldInstance","a","b","path","originalPath","pathToExpand","toLowerCase","paths","expandPath","map","get","originalValue","object","accumulator","segments","toPath","wildcardPos","indexOf","subObject","slice","isObjectLike","keys","key","concat","forEach","subPath","reconstructedPath","reduce","prev","segment","part","includes","test","push"],"sources":["/Users/collin/SeniorProject/pool-party/node_modules/express-validator/src/select-fields.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.selectFields = void 0;\nconst _ = require(\"lodash\");\nexports.selectFields = (req, fields, locations) => _(fields)\n    .flatMap(field => _.flatMap(locations, location => {\n    return expandField(req, field, location);\n}))\n    // Avoid duplicates if multiple field selections would return the same field twice.\n    // E.g. with fields = ['*.foo', 'bar.foo'] and req.body = { bar: { foo: 1 }, baz: { foo: 2 } },\n    // the instance bla.foo would appear twice, and baz.foo once.\n    .uniqWith(isSameFieldInstance)\n    .value();\nfunction isSameFieldInstance(a, b) {\n    return a.path === b.path && a.location === b.location;\n}\nfunction expandField(req, field, location) {\n    const originalPath = field;\n    const pathToExpand = location === 'headers' ? field.toLowerCase() : field;\n    const paths = [];\n    expandPath(req[location], pathToExpand, paths);\n    return paths.map(path => {\n        const value = path === '' ? req[location] : _.get(req[location], path);\n        return {\n            location,\n            path,\n            originalPath,\n            value,\n            originalValue: value,\n        };\n    });\n}\nfunction expandPath(object, path, accumulator) {\n    const segments = _.toPath(path);\n    const wildcardPos = segments.indexOf('*');\n    if (wildcardPos > -1) {\n        const subObject = wildcardPos === 0 ? object : _.get(object, segments.slice(0, wildcardPos));\n        if (!subObject || !_.isObjectLike(subObject)) {\n            return;\n        }\n        Object.keys(subObject)\n            .map(key => segments\n            // Before the *\n            .slice(0, wildcardPos)\n            // The part that the * matched\n            .concat(key)\n            // After the *\n            .concat(segments.slice(wildcardPos + 1)))\n            .forEach(subPath => {\n            expandPath(object, subPath, accumulator);\n        });\n    }\n    else {\n        const reconstructedPath = segments.reduce((prev, segment) => {\n            let part = '';\n            // TODO: Handle brackets?\n            if (segment.includes('.')) {\n                // Special char key access\n                part = `[\"${segment}\"]`;\n            }\n            else if (/^\\d+$/.test(segment)) {\n                // Index access\n                part = `[${segment}]`;\n            }\n            else if (prev) {\n                // Object key access\n                part = `.${segment}`;\n            }\n            else {\n                // Top level key\n                part = segment;\n            }\n            return prev + part;\n        }, '');\n        accumulator.push(reconstructedPath);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}