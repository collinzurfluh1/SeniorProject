{"ast":null,"code":"const {\n  check\n} = require('express-validator');\nmodule.exports = {\n  validateEmail: check('email')\n\n  // To delete leading and triling space\n  .trim()\n\n  // Normalizing the email address\n  .normalizeEmail()\n\n  // Checking if follow the email\n  // address format or not\n  .isEmail()\n\n  // Custom message\n  .withMessage('Invalid email')\n\n  // Custom validation\n  // Validate email in use or not\n  .custom(async email => {\n    const existingUser = await repo.getOneBy({\n      email\n    });\n    if (existingUser) {\n      throw new Error('Email already in use');\n    }\n  })\n};","map":{"version":3,"names":["check","require","module","exports","validateEmail","trim","normalizeEmail","isEmail","withMessage","custom","email","existingUser","repo","getOneBy","Error"],"sources":["/Users/collin/SeniorProject/pool-party/src/Middleware/Validator.js"],"sourcesContent":["const { check } = require('express-validator')\n \nmodule.exports = {\n \n    validateEmail: check('email')\n \n        // To delete leading and triling space\n        .trim()\n \n        // Normalizing the email address\n        .normalizeEmail()\n \n        // Checking if follow the email\n        // address format or not\n        .isEmail()\n \n        // Custom message\n        .withMessage('Invalid email')\n \n        // Custom validation\n        // Validate email in use or not\n        .custom(async (email) => {\n            const existingUser =\n                await repo.getOneBy({ email })\n                 \n            if (existingUser) {\n                throw new Error('Email already in use')\n            }\n        })\n}"],"mappings":"AAAA,MAAM;EAAEA;AAAM,CAAC,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAE9CC,MAAM,CAACC,OAAO,GAAG;EAEbC,aAAa,EAAEJ,KAAK,CAAC,OAAO;;EAExB;EAAA,CACCK,IAAI;;EAEL;EAAA,CACCC,cAAc;;EAEf;EACA;EAAA,CACCC,OAAO;;EAER;EAAA,CACCC,WAAW,CAAC,eAAe;;EAE5B;EACA;EAAA,CACCC,MAAM,CAAC,MAAOC,KAAK,IAAK;IACrB,MAAMC,YAAY,GACd,MAAMC,IAAI,CAACC,QAAQ,CAAC;MAAEH;IAAM,CAAC,CAAC;IAElC,IAAIC,YAAY,EAAE;MACd,MAAM,IAAIG,KAAK,CAAC,sBAAsB,CAAC;IAC3C;EACJ,CAAC;AACT,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}