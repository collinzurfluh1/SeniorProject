{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SanitizersImpl = void 0;\nconst validator = require(\"validator\");\nconst sanitization_1 = require(\"../context-items/sanitization\");\nclass SanitizersImpl {\n  constructor(builder, chain) {\n    this.builder = builder;\n    this.chain = chain;\n  }\n  // custom sanitizers\n  customSanitizer(sanitizer) {\n    this.builder.addItem(new sanitization_1.Sanitization(sanitizer, true));\n    return this.chain;\n  }\n  default(default_value) {\n    return this.customSanitizer(value => [undefined, null, NaN, ''].includes(value) ? default_value : value);\n  }\n  replace(values_to_replace, new_value) {\n    if (!Array.isArray(values_to_replace)) {\n      values_to_replace = [values_to_replace];\n    }\n    return this.customSanitizer(value => values_to_replace.includes(value) ? new_value : value);\n  }\n  // Standard sanitizers\n  addStandardSanitization(sanitizer) {\n    for (var _len = arguments.length, options = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      options[_key - 1] = arguments[_key];\n    }\n    this.builder.addItem(new sanitization_1.Sanitization(sanitizer, false, options));\n    return this.chain;\n  }\n  blacklist(chars) {\n    return this.addStandardSanitization(validator.blacklist, chars);\n  }\n  escape() {\n    return this.addStandardSanitization(validator.escape);\n  }\n  unescape() {\n    return this.addStandardSanitization(validator.unescape);\n  }\n  ltrim(chars) {\n    return this.addStandardSanitization(validator.ltrim, chars);\n  }\n  normalizeEmail(options) {\n    return this.addStandardSanitization(validator.normalizeEmail, options);\n  }\n  rtrim(chars) {\n    return this.addStandardSanitization(validator.rtrim, chars);\n  }\n  stripLow(keep_new_lines) {\n    return this.addStandardSanitization(validator.stripLow, keep_new_lines);\n  }\n  toArray() {\n    return this.customSanitizer(value => value !== undefined && (Array.isArray(value) && value || [value]) || []);\n  }\n  toBoolean(strict) {\n    return this.addStandardSanitization(validator.toBoolean, strict);\n  }\n  toDate() {\n    return this.addStandardSanitization(validator.toDate);\n  }\n  toFloat() {\n    return this.addStandardSanitization(validator.toFloat);\n  }\n  toInt(radix) {\n    return this.addStandardSanitization(validator.toInt, radix);\n  }\n  toLowerCase() {\n    return this.customSanitizer(value => typeof value === 'string' ? value.toLowerCase() : value);\n  }\n  toUpperCase() {\n    return this.customSanitizer(value => typeof value === 'string' ? value.toUpperCase() : value);\n  }\n  trim(chars) {\n    return this.addStandardSanitization(validator.trim, chars);\n  }\n  whitelist(chars) {\n    return this.addStandardSanitization(validator.whitelist, chars);\n  }\n}\nexports.SanitizersImpl = SanitizersImpl;","map":{"version":3,"names":["Object","defineProperty","exports","value","SanitizersImpl","validator","require","sanitization_1","constructor","builder","chain","customSanitizer","sanitizer","addItem","Sanitization","default","default_value","undefined","NaN","includes","replace","values_to_replace","new_value","Array","isArray","addStandardSanitization","options","blacklist","chars","escape","unescape","ltrim","normalizeEmail","rtrim","stripLow","keep_new_lines","toArray","toBoolean","strict","toDate","toFloat","toInt","radix","toLowerCase","toUpperCase","trim","whitelist"],"sources":["/Users/collin/SeniorProject/pool-party/node_modules/express-validator/src/chain/sanitizers-impl.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SanitizersImpl = void 0;\nconst validator = require(\"validator\");\nconst sanitization_1 = require(\"../context-items/sanitization\");\nclass SanitizersImpl {\n    constructor(builder, chain) {\n        this.builder = builder;\n        this.chain = chain;\n    }\n    // custom sanitizers\n    customSanitizer(sanitizer) {\n        this.builder.addItem(new sanitization_1.Sanitization(sanitizer, true));\n        return this.chain;\n    }\n    default(default_value) {\n        return this.customSanitizer(value => [undefined, null, NaN, ''].includes(value) ? default_value : value);\n    }\n    replace(values_to_replace, new_value) {\n        if (!Array.isArray(values_to_replace)) {\n            values_to_replace = [values_to_replace];\n        }\n        return this.customSanitizer(value => (values_to_replace.includes(value) ? new_value : value));\n    }\n    // Standard sanitizers\n    addStandardSanitization(sanitizer, ...options) {\n        this.builder.addItem(new sanitization_1.Sanitization(sanitizer, false, options));\n        return this.chain;\n    }\n    blacklist(chars) {\n        return this.addStandardSanitization(validator.blacklist, chars);\n    }\n    escape() {\n        return this.addStandardSanitization(validator.escape);\n    }\n    unescape() {\n        return this.addStandardSanitization(validator.unescape);\n    }\n    ltrim(chars) {\n        return this.addStandardSanitization(validator.ltrim, chars);\n    }\n    normalizeEmail(options) {\n        return this.addStandardSanitization(validator.normalizeEmail, options);\n    }\n    rtrim(chars) {\n        return this.addStandardSanitization(validator.rtrim, chars);\n    }\n    stripLow(keep_new_lines) {\n        return this.addStandardSanitization(validator.stripLow, keep_new_lines);\n    }\n    toArray() {\n        return this.customSanitizer(value => (value !== undefined && ((Array.isArray(value) && value) || [value])) || []);\n    }\n    toBoolean(strict) {\n        return this.addStandardSanitization(validator.toBoolean, strict);\n    }\n    toDate() {\n        return this.addStandardSanitization(validator.toDate);\n    }\n    toFloat() {\n        return this.addStandardSanitization(validator.toFloat);\n    }\n    toInt(radix) {\n        return this.addStandardSanitization(validator.toInt, radix);\n    }\n    toLowerCase() {\n        return this.customSanitizer(value => (typeof value === 'string' ? value.toLowerCase() : value));\n    }\n    toUpperCase() {\n        return this.customSanitizer(value => (typeof value === 'string' ? value.toUpperCase() : value));\n    }\n    trim(chars) {\n        return this.addStandardSanitization(validator.trim, chars);\n    }\n    whitelist(chars) {\n        return this.addStandardSanitization(validator.whitelist, chars);\n    }\n}\nexports.SanitizersImpl = SanitizersImpl;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}